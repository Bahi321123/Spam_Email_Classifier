# -*- coding: utf-8 -*-
"""Spam_Email_Classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Waoo2-22u-HIxSGG2JLuqJZ_UGL7ey7Q

***TOPIC***
"""

# Install any missing libraries (Colab usually has these pre-installed)
!pip install nltk scikit-learn pandas

import pandas as pd
import numpy as np
import nltk
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Download NLTK data
nltk.download('punkt')
nltk.download('stopwords')

# Load SMS Spam Collection dataset from GitHub
url = "https://raw.githubusercontent.com/justmarkham/pycon-2016-tutorial/master/data/sms.tsv"
df = pd.read_csv(url, sep='\t', names=["label", "message"])

# Show first 5 rows
df.head()

# Map labels: ham -> 0, spam -> 1
df['label_num'] = df.label.map({'ham': 0, 'spam': 1})

# Check the updated dataset
df.head()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    df['message'],  # features (SMS text)
    df['label_num'],  # target (0 = ham, 1 = spam)
    test_size=0.2,   # 20% test, 80% train
    random_state=42  # reproducibility
)

"""Step 5 â€” Vectorize Text
Weâ€™ll convert text into numbers using Bag of Words (CountVectorizer).
"""

vectorizer = CountVectorizer(stop_words='english')  # remove common English stopwords
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

"""Step 6 â€” Train Naive Bayes Model"""

model = MultinomialNB()
model.fit(X_train_vec, y_train)

"""Step 7 â€” Evaluate Model"""

y_pred = model.predict(X_test_vec)

print("âœ… Accuracy:", accuracy_score(y_test, y_pred))
print("\nðŸ“Š Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nðŸ“„ Classification Report:\n", classification_report(y_test, y_pred))

"""Step 8 â€” Test with Your Own Message"""

def predict_spam(message):
    message_vec = vectorizer.transform([message])
    prediction = model.predict(message_vec)[0]
    return "Spam ðŸš¨" if prediction == 1 else "Ham âœ…"

# Try it
print(predict_spam("Congratulations! You've won a free iPhone. Click here to claim."))
print(predict_spam("Hey, are we still meeting for lunch today?"))

